{"version":3,"file":"ExponentNotifications.web.js","sourceRoot":"","sources":["../../src/Notifications/ExponentNotifications.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport UUID from 'uuid-js';\n\nimport { LocalNotification, LocalNotificationId } from './Notifications.types';\n\n// Register `message`'s event listener (side-effect)\nimport './ExponentNotifications.fx.web';\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be sent because the service worker API is not supported on this device.'\n    );\n  }\n  if (!navigator.serviceWorker.controller) {\n    throw new Error(\n      'Notifications cannot be sent because there is no service worker controller registered. Ensure you have SSL certificates enabled.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nfunction transformLocalNotification(\n  notification: LocalNotification,\n  tag: string\n): [string, NotificationOptions] {\n  const { web = {}, ...abstractNotification } = notification;\n  tag = web.tag || tag;\n  const nativeNotification = {\n    ...abstractNotification,\n    tag,\n    ...web,\n  };\n  return [nativeNotification.title, nativeNotification];\n}\n\nfunction generateID(): string {\n  return UUID.create().toString();\n}\n\nasync function getRegistrationAsync(): Promise<ServiceWorkerRegistration> {\n  guardPermission();\n  const registration = await navigator.serviceWorker.getRegistration();\n  if (!registration) {\n    throw new Error('Failed to get notification registration!');\n  }\n  return registration;\n}\n\nasync function getNotificationsAsync(tag?: string): Promise<Notification[]> {\n  const registration = await getRegistrationAsync();\n  const notifications = await registration.getNotifications(tag ? { tag } : undefined);\n  return notifications;\n}\n\nexport default {\n  async presentLocalNotification(notification: LocalNotification): Promise<LocalNotificationId> {\n    const registration = await getRegistrationAsync();\n    const tag = generateID();\n    registration.showNotification(...transformLocalNotification(notification, tag));\n    return tag;\n  },\n  async scheduleLocalNotification(\n    notification: any,\n    options: {\n      time?: Date | number;\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n      intervalMs?: number;\n    } = {}\n  ): Promise<string> {\n    if (options.intervalMs) {\n      const registration = await getRegistrationAsync();\n      const tag = generateID();\n      setTimeout(() => {\n        registration.showNotification(...transformLocalNotification(notification, tag));\n      }, options.intervalMs);\n      return tag;\n    } else if (options.time) {\n      const intervalMs = (options.time as number) - Date.now();\n      if (intervalMs < 0) {\n        throw new Error(\n          'Expo.Notifications.scheduleLocalNotification(): options.time must be some time in the future.'\n        );\n      }\n      return this.scheduleLocalNotification(notification, {\n        intervalMs,\n      });\n    }\n    throw new Error(\n      `Expo.Notifications.scheduleLocalNotification() options ${JSON.stringify(\n        options,\n        null,\n        2\n      )} are not supported yet.`\n    );\n  },\n\n  async dismissNotification(notificationId?: string): Promise<void> {\n    const notifications = await getNotificationsAsync(notificationId);\n    for (const notification of notifications) {\n      notification.close();\n    }\n  },\n  async dismissAllNotifications(): Promise<void> {\n    this.dismissNotification();\n  },\n  async cancelScheduledNotificationAsync(notificationId: string): Promise<void> {\n    this.dismissNotification(notificationId);\n  },\n  async cancelAllScheduledNotificationsAsync(): Promise<void> {\n    this.dismissNotification();\n  },\n\n  async getExponentPushTokenAsync(): Promise<string> {\n    if (!Constants.manifest.owner || !Constants.manifest.slug) {\n      throw new CodedError(\n        'ERR_WEB_PUSH_NOTIFICATIONS_MISSING_CONFIG',\n        'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Read more here: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n      );\n    }\n\n    const data = await _subscribeUserToPushAsync();\n    const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n    const tokenArguments: { [key: string]: string } = {\n      deviceId: Constants.installationId,\n      experienceId: experienceId,\n      // Also uses `experienceId` for `appId` because there's no `appId` for web.\n      appId: experienceId,\n      deviceToken: JSON.stringify(data),\n      type: 'web',\n    };\n\n    // TODO: Use production URL\n    const response = await fetch('http://expo.test/--/api/v2/push/getExpoPushToken', {\n      method: 'POST',\n      body: JSON.stringify(tokenArguments),\n    }).then(response => response.json());\n\n    // TODO: Error handling\n    return response.data.expoPushToken;\n  },\n\n  async getDevicePushTokenAsync(): Promise<{ type: string; data: Object }> {\n    const data = await _subscribeUserToPushAsync();\n    return { type: 'web', data: data };\n  },\n};\n\nasync function _subscribeUserToPushAsync(): Promise<Object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'ERR_WEB_PUSH_NOTIFICATIONS_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Read more here: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/custom-service-worker.js');\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n  console.log('subscriptionObject: ', JSON.stringify(subscriptionObject));\n\n  if (registration.active) {\n    // Store notification icon string in service worker.\n    // https://stackoverflow.com/a/35729334/2603230\n    let notificationIcon = (Constants.manifest.notification || {}).icon;\n    registration.active.postMessage(JSON.stringify({ notificationIcon }));\n  }\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"]}