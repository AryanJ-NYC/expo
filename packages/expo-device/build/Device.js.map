{"version":3,"file":"Device.js","sourceRoot":"","sources":["../src/Device.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEjE,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAEvD,MAAM,CAAN,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,6BAAe,CAAA;IACf,+BAAiB,CAAA;IACjB,iCAAmB,CAAA;IACnB,uBAAS,CAAA;IACT,iCAAmB,CAAA;AACrB,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1D,MAAM,CAAC,MAAM,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;AACxE,MAAM,CAAC,IAAI,SAAS,CAAC;AACrB,MAAM,CAAC,IAAI,kBAAkB,CAAC;AAC9B,MAAM,CAAC,IAAI,OAAO,CAAC;AACnB,MAAM,CAAC,IAAI,UAAU,CAAC;AACtB,MAAM,CAAC,IAAI,WAAW,CAAC;AACvB,MAAM,CAAC,IAAI,gBAAgB,CAAC;AAC5B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IACzB,IAAI,aAAa,CAAC;IAClB,IAAI,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC;IACpC,IAAI,UAAU,EAAE;QACd,aAAa,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAC9C,IAAI,CAAC,aAAa,EAAE;YAClB,+EAA+E;YAC/E,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;gBACjC,aAAa,GAAG,YAAY,CAAC;aAC9B;iBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;gBACxC,aAAa,GAAG,MAAM,CAAC;aACxB;iBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBAC1C,aAAa,GAAG,QAAQ,CAAC;aAC1B;iBAAM,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBAC3C,aAAa,GAAG,UAAU,CAAC;aAC5B;SACF;KACF;IACD,SAAS,GAAG,aAAa,CAAC;IAC1B,kBAAkB,GAAG,IAAI,CAAC;IAC1B,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACjD,UAAU,GAAG,IAAI,CAAC;IAClB,WAAW,GAAG,IAAI,CAAC;IACnB,gBAAgB,GAAG,IAAI,CAAC;CACzB;KAAM;IACL,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IACrD,kBAAkB,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;IACvE,OAAO,GAAG,IAAI,CAAC;IACf,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IACvD,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;IACzD,gBAAgB,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;CACpE;AACD,MAAM,CAAC,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;AAC5D,MAAM,CAAC,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;AACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;AAChE,MAAM,CAAC,MAAM,yBAAyB,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC;AAClG,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;AAClE,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;AAClE,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;AACpE,MAAM,CAAC,MAAM,iBAAiB,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;AAClF,MAAM,CAAC,MAAM,eAAe,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC;AAE9E,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,OAAe;IAC3D,IAAI,CAAC,UAAU,CAAC,uBAAuB,EAAE;QACvC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;KACzE;IACD,OAAO,MAAM,UAAU,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE;QACxC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,0BAA0B,CAAC,CAAC;KAC1E;IACD,OAAO,MAAM,UAAU,CAAC,wBAAwB,EAAE,CAAC;AACrD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB;IACrC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;KACnE;IACD,IAAI,SAAS,GAAG,MAAM,UAAU,CAAC,iBAAiB,EAAE,CAAC;IACrD,IAAI,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB,SAAS,GAAG,MAAM,CAAC,gBAAgB,CAAC;KACrC;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,IAAI,CAAC,UAAU,CAAC,yBAAyB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,2BAA2B,CAAC,CAAC;KAC3E;IACD,OAAO,MAAM,UAAU,CAAC,yBAAyB,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;QAC9B,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;KAChE;IACD,OAAO,MAAM,UAAU,CAAC,cAAc,EAAE,CAAC;AAC3C,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,IAAI,CAAC,UAAU,CAAC,yBAAyB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,2BAA2B,CAAC,CAAC;KAC3E;IACD,OAAO,MAAM,UAAU,CAAC,yBAAyB,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB;IACtC,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE;QAClC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;KACpE;IACD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,kBAAkB,EAAE,CAAC;IACzD,QAAQ,UAAU,EAAE;QAClB,KAAK,UAAU,CAAC,KAAK;YACnB,OAAO,UAAU,CAAC,KAAK,CAAC;QAC1B,KAAK,UAAU,CAAC,MAAM;YACpB,OAAO,UAAU,CAAC,MAAM,CAAC;QAC3B,KAAK,UAAU,CAAC,EAAE;YAChB,OAAO,UAAU,CAAC,EAAE,CAAC;QACvB,KAAK,UAAU,CAAC,OAAO;YACrB,OAAO,UAAU,CAAC,OAAO,CAAC;QAC5B;YACE,OAAO,UAAU,CAAC,OAAO,CAAC;KAC7B;AACH,CAAC","sourcesContent":["import { Platform, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoDevice from './ExpoDevice';\nimport { deviceNamesByCode } from './DeviceNameByCode';\n\nexport enum DeviceType {\n  PHONE = 'PHONE',\n  TABLET = 'TABLET',\n  DESKTOP = 'DESKTOP',\n  TV = 'TV',\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport const brand = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nexport let modelName;\nexport let osBuildFingerprint;\nexport let modelId;\nexport let designName;\nexport let productName;\nexport let platformApiLevel;\nif (Platform.OS === 'ios') {\n  let IosDeviceName;\n  let IosModelId = ExpoDevice.modelId;\n  if (IosModelId) {\n    IosDeviceName = deviceNamesByCode[IosModelId];\n    if (!IosDeviceName) {\n      // Not found on database. At least guess main device type from string contents:\n      if (IosModelId.startsWith('iPod')) {\n        IosDeviceName = 'iPod Touch';\n      } else if (IosModelId.startsWith('iPad')) {\n        IosDeviceName = 'iPad';\n      } else if (IosModelId.startsWith('iPhone')) {\n        IosDeviceName = 'iPhone';\n      } else if (IosModelId.startsWith('AppleTV')) {\n        IosDeviceName = 'Apple TV';\n      }\n    }\n  }\n  modelName = IosDeviceName;\n  osBuildFingerprint = null;\n  modelId = ExpoDevice ? ExpoDevice.modelId : null;\n  designName = null;\n  productName = null;\n  platformApiLevel = null;\n} else {\n  modelName = ExpoDevice ? ExpoDevice.modelName : null;\n  osBuildFingerprint = ExpoDevice ? ExpoDevice.osBuildFingerprint : null;\n  modelId = null;\n  designName = ExpoDevice ? ExpoDevice.designName : null;\n  productName = ExpoDevice ? ExpoDevice.productName : null;\n  platformApiLevel = ExpoDevice ? ExpoDevice.platformApiLevel : null;\n}\nexport const osName = ExpoDevice ? ExpoDevice.osName : null;\nexport const totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const isDevice = ExpoDevice ? ExpoDevice.isDevice : null;\nexport const supportedCpuArchitectures = ExpoDevice ? ExpoDevice.supportedCpuArchitectures : null;\nexport const osBuildId = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport const osVersion = ExpoDevice ? ExpoDevice.osVersion : null;\nexport const deviceName = ExpoDevice ? ExpoDevice.deviceName : null;\nexport const osInternalBuildId = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport const deviceYearClass = ExpoDevice ? ExpoDevice.deviceYearClass : null;\n\nexport async function hasPlatformFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasPlatformFeatureAsync) {\n    throw new UnavailabilityError('expo-device', 'hasPlatformFeatureAsync');\n  }\n  return await ExpoDevice.hasPlatformFeatureAsync(feature);\n}\n\nexport async function getPlatformFeaturesAsync(): Promise<string[]> {\n  if (!ExpoDevice.getPlatformFeaturesAsync) {\n    throw new UnavailabilityError('expo-device', 'getPlatformFeaturesAsync');\n  }\n  return await ExpoDevice.getPlatformFeaturesAsync();\n}\n\nexport async function getMaxMemoryAsync(): Promise<number> {\n  if (!ExpoDevice.getMaxMemoryAsync) {\n    throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n  }\n  let maxMemory = await ExpoDevice.getMaxMemoryAsync();\n  if (maxMemory === -1) {\n    maxMemory = Number.MAX_SAFE_INTEGER;\n  }\n  return Promise.resolve(maxMemory);\n}\n\nexport async function isSideLoadingEnabledAsync(): Promise<boolean> {\n  if (!ExpoDevice.isSideLoadingEnabledAsync) {\n    throw new UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n  }\n  return await ExpoDevice.isSideLoadingEnabledAsync();\n}\n\nexport async function getUptimeAsync(): Promise<number> {\n  if (!ExpoDevice.getUptimeAsync) {\n    throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n  }\n  return await ExpoDevice.getUptimeAsync();\n}\n\nexport async function isRootedExperimentalAsync(): Promise<boolean> {\n  if (!ExpoDevice.isRootedExperimentalAsync) {\n    throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n  }\n  return await ExpoDevice.isRootedExperimentalAsync();\n}\n\nexport async function getDeviceTypeAsync(): Promise<DeviceType> {\n  if (!ExpoDevice.getDeviceTypeAsync) {\n    throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n  }\n  const deviceType = await ExpoDevice.getDeviceTypeAsync();\n  switch (deviceType) {\n    case DeviceType.PHONE:\n      return DeviceType.PHONE;\n    case DeviceType.TABLET:\n      return DeviceType.TABLET;\n    case DeviceType.TV:\n      return DeviceType.TV;\n    case DeviceType.DESKTOP:\n      return DeviceType.DESKTOP;\n    default:\n      return DeviceType.UNKNOWN;\n  }\n}\n"]}